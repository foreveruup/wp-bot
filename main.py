import os
import requests
import json
import time
import logging
from datetime import datetime
from dotenv import load_dotenv
from typing import Optional
from openai import OpenAI

# ===========================
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ===========================
load_dotenv()

# ===========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ===========================
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('whatsapp_bot')


class WhatsAppBot:
    def __init__(self):
        # ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Green API ----
        self.instance_id = os.environ.get("INSTANCE_ID")
        self.api_token = os.environ.get("INSTANCE_TOKEN")
        self.base_url = f"https://api.green-api.com/waInstance{self.instance_id}"

        # ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI ----
        self.api_key = os.environ.get("OPENAI_API_KEY")
        self.client = OpenAI(api_key=self.api_key)
        self.openai_model = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")

        # ---- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----
        if not all([self.instance_id, self.api_token, self.api_key]):
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: INSTANCE_ID/INSTANCE_TOKEN/OPENAI_API_KEY")
        
        
        

        # ---- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ----
        self.system_prompt = """–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —á–∞—Ç-–±–æ—Ç–∞–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.

        –¢–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 24/7
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –∏ –∑–∞–∫–∞–∑–æ–≤
        ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM (–ë–∏—Ç—Ä–∏–∫—Å24, amoCRM, HubSpot)
        ‚Ä¢ –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
        ‚Äî –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.
        ‚Äî –ò—Å–ø–æ–ª—å–∑—É–π 1‚Äì3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–Ω–µ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ).
        ‚Äî –ë–µ–∑ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π ‚Äî –º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
        ‚Äî –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –ò–º—è, –ö–æ–º–ø–∞–Ω–∏—é, –¢–µ–ª–µ—Ñ–æ–Ω, –ó–∞–¥–∞—á—É –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π.
        ‚Äî –ï—Å–ª–∏ –∑–∞–¥–∞—é—Ç ¬´—á—Ç–æ —É–º–µ–µ—à—å/–ø—Ä–æ–¥–∞–∂–∏/CRM/—Ü–µ–Ω–∞¬ª ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–µ–¥–º–µ—Ç–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –±–µ–∑ —Å—É—Ö–∏—Ö –±—É–ª–ª–µ—Ç–æ–≤.
        ‚Äî –î–∞–≤–∞–π –ª—ë–≥–∫–∏–π CTA: ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä?¬ª, ¬´–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ —Å–æ–∑–≤–æ–Ω?¬ª, ¬´–ù—É–∂–Ω—ã –∫–µ–π—Å—ã?¬ª.

        –ö–û–ù–ö–†–ï–¢–ù–´–ï –û–†–ò–ï–ù–¢–ò–†–´:
        - "—á—Ç–æ —É–º–µ–µ—à—å" ‚Üí –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—à—å –æ—Ç–≤–µ—Ç—ã, –∑–∞—è–≤–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM, –ø—Ä–∏–º–µ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        - "—Ü–µ–Ω–∞/—Å—Ç–æ–∏–º–æ—Å—Ç—å" ‚Üí –æ—Ç 15 000‚ÇΩ –∑–∞ –±–∞–∑–æ–≤–æ–≥–æ –±–æ—Ç–∞, —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        - "CRM" ‚Üí –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API: –ª–∏–¥—ã, —Å—Ç–∞—Ç—É—Å—ã, —Å–¥–µ–ª–∫–∏, webhooks
        - "–ø—Ä–æ–¥–∞–∂–∏" ‚Üí –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞—á–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É

        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç—è–∂—ë–ª—ã–µ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º—ã. –ü–æ–º–Ω–∏ –ø—Ä–æ —Ç–æ–Ω: –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É."""
        # ---- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –ø–∞–º—è—Ç–∏ ----
        self.processed_messages = set()  # –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ idMessage
        self.history = {}  # chat_id -> list of messages
        self.last_reply = {}  # chat_id -> last assistant message (anti-duplicate)

    # ===========================
    # –£–¢–ò–õ–ò–¢–´: –æ—Ç–ø—Ä–∞–≤–∫–∞/–ø—Ä–∏—ë–º WhatsApp
    # ===========================
    
    def clear_chat_history(self, chat_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if chat_id in self.history:
            del self.history[chat_id]
        if chat_id in self.last_reply:
            del self.last_reply[chat_id]
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id} –æ—á–∏—â–µ–Ω–∞")
    
    def send_message(self, chat_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.base_url}/sendMessage/{self.api_token}"
        payload = {"chatId": chat_id, "message": message}
        try:
            r = requests.post(url, json=payload, timeout=10)
            ok = r.status_code == 200
            if not ok:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %s %s", r.status_code, r.text)
            return ok
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def send_unique(self, chat_id: str, message: str) -> bool:
        """–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –ø–æ–¥—Ä—è–¥ –æ–¥–Ω–æ–º—É —á–∞—Ç—É"""
        if self.last_reply.get(chat_id, "").strip() == message.strip():
            logger.info("–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É: –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥—Ä—è–¥")
            return True
        ok = self.send_message(chat_id, message)
        if ok:
            self.last_reply[chat_id] = message
        return ok

    def get_notification(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Green API –æ—Ç–¥–∞—ë—Ç –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ –≤—ã–∑–æ–≤)"""
        url = f"{self.base_url}/receiveNotification/{self.api_token}"
        try:
            r = requests.get(url, timeout=15)
            if r.status_code == 200:
                data = r.json()
                # –ï—Å–ª–∏ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null
                return data
            logger.error("receiveNotification %s %s", r.status_code, r.text)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None

    def delete_notification(self, receipt_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä"""
        url = f"{self.base_url}/deleteNotification/{self.api_token}/{receipt_id}"
        try:
            r = requests.delete(url, timeout=10)
            ok = r.status_code == 200
            if not ok:
                logger.error("deleteNotification %s %s", r.status_code, r.text)
            return ok
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    # ===========================
    # LLM
    # ===========================
    def get_openai_response(self, chat_id: str, user_message: str) -> str:
        """–û—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–°–¢–û–†–ò–ò –¥–∏–∞–ª–æ–≥–∞ –∏ –º—è–≥–∫–∏—Ö –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–æ–≤"""
        hist = self.history.setdefault(chat_id, [])
        hist.append({"role": "user", "content": user_message})

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        window = hist[-12:]

        style_rules = (
            "–ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ (1‚Äì3 –Ω–∞ –æ—Ç–≤–µ—Ç), "
            "–±–µ–∑ —Å—É—Ö–∏—Ö –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî —Å–æ–±–µ—Ä–∏: –ò–º—è, –ö–æ–º–ø–∞–Ω–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ó–∞–¥–∞—á–∞. "
            "–ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –ø–æ–ª–µ–π ‚Äî —Å–ø—Ä–æ—Å–∏ –∏—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É."
        )

        system = (
            self.system_prompt
            + "\n\n–°–¢–ò–õ–¨ –ò –§–û–†–ú–ê–¢:\n"
            + style_rules
            + "\n\n–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í:\n"
            "‚Äî ¬´–ú–æ–≥—É: –æ—Ç–≤–µ—á–∞—Ç—å 24/7, —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏–¥—ã –≤ CRM –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å? ¬ª\n"
            "‚Äî ¬´–î–∞, –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–¥–∞–≤–∞—Ç—å: –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É—é –ª–∏–¥–æ–≤, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—é —Ç—ë–ø–ª—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ù—É–∂–Ω—ã –∫–µ–π—Å—ã?¬ª\n"
            "‚Äî ¬´–ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "–ò–º—è: ...\n–ö–æ–º–ø–∞–Ω–∏—è: ...\n–¢–µ–ª–µ—Ñ–æ–Ω: ...\n–ó–∞–¥–∞—á–∞: ... ¬ª"
        )

        messages = [{"role": "system", "content": system}] + window

        try:
            resp = self.client.chat.completions.create(
                model=self.openai_model,
                messages=messages,
                max_tokens=350,
                temperature=0.8,
                top_p=0.9,
                frequency_penalty=0.6,  # –º—è–≥–∫–æ —à—Ç—Ä–∞—Ñ—É–µ–º –ø–æ–≤—Ç–æ—Ä—ã
                presence_penalty=0.5
            )
            answer = resp.choices[0].message.content.strip()
            hist.append({"role": "assistant", "content": answer})
            self.history[chat_id] = hist[-24:]  # –ø–æ–¥—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            logger.info(f"üß† GPT –æ—Ç–≤–µ—Ç–∏–ª: {answer[:80]}...")
            return answer
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üôè"


    # ===========================
    # –ë–´–°–¢–†–ê–Ø –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø (–±–µ–∑ LLM)
    # ===========================
    def route_intent(self, text: str) -> Optional[str]:
        t = (text or "").lower().strip()
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç: '{t}'")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –°–¢–û–ü–†–û–¶–ï–ù–¢–ù–û –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        hello_set = {"–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Å–∞–ª–∞–º", "hi", "hello", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"}
        if t in hello_set or t.replace("!", "") in hello_set:
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å –±–æ—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π. –†–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —É–º–µ—é, –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—à—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ß—Ç–æ —É–¥–æ–±–Ω–µ–µ? üôÇ"

        # –Ø–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
        if any(kw in t for kw in ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü", "—Å–æ–∑–≤–æ–Ω", "–ø–µ—Ä–µ–∑–≤–æ–Ω", "–∑–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è", "appointment"]):
            form = (
                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—à—É –≤–∞—Å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ:\n"
                "–ò–º—è: \n–ö–æ–º–ø–∞–Ω–∏—è: \n–¢–µ–ª–µ—Ñ–æ–Ω: \n–ó–∞–¥–∞—á–∞ (—á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å): "
            )
            return form

        # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–¥–∞—ë–º LLM
        return None

    # ===========================
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    # ===========================
    def save_client_data(self, phone: str, data: dict) -> bool:
        try:
            filename = "client_records.json"
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    clients = json.load(f)
            else:
                clients = {}

            clients[phone] = {**data, 'recorded_at': datetime.now().isoformat(), 'status': 'new'}

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(clients, f, ensure_ascii=False, indent=2)
            logger.info(f"–ó–∞–ø–∏—Å–∞–Ω –∫–ª–∏–µ–Ω—Ç {phone}: {data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def extract_client_info(self, text: str) -> dict:
        info = {}
        for raw_line in text.split('\n'):
            line = raw_line.strip()
            low = line.lower()
            if '–∏–º—è:' in low or 'name:' in low:
                info['name'] = line.split(':', 1)[1].strip()
            elif '–∫–æ–º–ø–∞–Ω–∏—è:' in low or 'company:' in low:
                info['company'] = line.split(':', 1)[1].strip()
            elif '—Ç–µ–ª–µ—Ñ–æ–Ω:' in low or 'phone:' in low:
                info['phone'] = line.split(':', 1)[1].strip()
            elif '–Ω—É–∂–µ–Ω –±–æ—Ç –¥–ª—è:' in low or '–±–æ—Ç –¥–ª—è:' in low:
                info['bot_type'] = line.split(':', 1)[1].strip()
        return info

    # ===========================
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ===========================
    def process_message(self, notification: dict):
        try:
            # Green API: –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ receiptId –∏ body
            if not notification:
                return
            receipt_id = notification.get('receiptId')
            body = notification.get('body', {})
            if not body:
                return

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –≤–µ–±—Ö—É–∫–∞
            if body.get('typeWebhook') != 'incomingMessageReceived':
                # –≤–∞–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–Ω–∞—á–µ –±—É–¥—É—Ç –≤–∏—Å–µ—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            message_data = body.get('messageData', {})
            sender_data = body.get('senderData', {})

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'textMessageData' in message_data:
                message_text = message_data['textMessageData'].get('textMessage', '')
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            chat_id = sender_data.get('chatId', '')
            phone = sender_data.get('sender', '')

            if not message_text or not chat_id:
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
            message_id = message_data.get('idMessage')
            if message_id and message_id in self.processed_messages:
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {phone}: {message_text}")

            # –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if message_text.strip().startswith('/clients'):
                # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
                if phone in {"+77776463138", "77776463138"}:
                    self.handle_clients_command(chat_id)
                else:
                    self.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
                if message_id:
                    self.processed_messages.add(message_id)
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ LLM (—Å–ª–æ—Ç-—Ñ–∏–ª–ª–∏–Ω–≥)
            if any(k in message_text.lower() for k in ['–∏–º—è:', '–∫–æ–º–ø–∞–Ω–∏—è:', '—Ç–µ–ª–µ—Ñ–æ–Ω:', 'name:', 'company:', 'phone:', '–∑–∞–¥–∞—á']):
                client_info = self.extract_client_info(message_text)

                # –î–æ—Å—Ç–∞–Ω–µ–º ¬´–∑–∞–¥–∞—á—É¬ª, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—ë —É–∫–∞–∑–∞–ª —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if '–∑–∞–¥–∞—á–∞' not in client_info and '–±–æ—Ç –¥–ª—è' in message_text.lower():
                    client_info['bot_type'] = message_text.split(':', 1)[-1].strip()

                # –î–æ—Å–æ–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                need = []
                if not client_info.get('name'):     need.append("–ò–º—è")
                if not client_info.get('company'):  need.append("–ö–æ–º–ø–∞–Ω–∏—è")
                if not client_info.get('phone'):    need.append("–¢–µ–ª–µ—Ñ–æ–Ω")
                if not client_info.get('bot_type'): need.append("–ó–∞–¥–∞—á–∞")

                if need:
                    ask = "–ü–æ—á—Ç–∏ –≤—Å—ë! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: " + ", ".join(need) + ".\n–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è: ...\n–ö–æ–º–ø–∞–Ω–∏—è: ...\n–¢–µ–ª–µ—Ñ–æ–Ω: ...\n–ó–∞–¥–∞—á–∞: ..."
                    self.send_message(chat_id, ask)
                else:
                    if self.save_client_data(phone, client_info):
                        resp = (
                            "‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤–∞—Å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
                            f"üë§ –ò–º—è: {client_info.get('name')}\n"
                            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {client_info.get('company')}\n"
                            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_info.get('phone')}\n"
                            f"üß© –ó–∞–¥–∞—á–∞: {client_info.get('bot_type')}\n\n"
                            "–°–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ WhatsApp? üôÇ"
                        )
                        self.send_message(chat_id, resp)
                if message_id:
                    self.processed_messages.add(message_id)
                if receipt_id:
                    self.delete_notification(receipt_id)
                return
                    
                    
            if message_text.strip() == '/reset':
                if phone in {"+77776463138", "77776463138"}:
                    self.clear_chat_history(chat_id)
                    self.send_message(chat_id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")
                if message_id:
                    self.processed_messages.add(message_id)
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            # –ë—ã—Å—Ç—Ä–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è (–±–µ–∑ LLM)
            quick = self.route_intent(message_text)
            if quick:
                self.send_message(chat_id, quick)
                if message_id:
                    self.processed_messages.add(message_id)
                if receipt_id:
                    self.delete_notification(receipt_id)
                return

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM
            response = self.get_openai_response(chat_id, message_text)
            self.send_message(chat_id, response)

            if message_id:
                self.processed_messages.add(message_id)
            if receipt_id:
                self.delete_notification(receipt_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—á–µ—Ä–µ–¥—å –Ω–µ —Å—Ç–æ–ø–æ—Ä–∏–ª–∞—Å—å
            rid = notification.get('receiptId') if notification else None
            if rid:
                self.delete_notification(rid)

    # ===========================
    # /clients –∫–æ–º–∞–Ω–¥–∞
    # ===========================
    def handle_clients_command(self, chat_id: str):
        try:
            filename = "client_records.json"
            if not os.path.exists(filename):
                self.send_message(chat_id, "üì≠ –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            with open(filename, 'r', encoding='utf-8') as f:
                clients = json.load(f)

            if not clients:
                self.send_message(chat_id, "üì≠ –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            # –ü–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
            recent = list(clients.items())[-3:]
            response_lines = ["üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"]
            for phone, data in recent:
                response_lines.append(
                    (
                        f"üì± {phone}\n"
                        f"üë§ {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üè¢ {data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"ü§ñ {data.get('bot_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üìÖ {data.get('recorded_at', '').split('T')[0]}\n"
                    )
                )
            self.send_message(chat_id, "\n".join(response_lines))
        except Exception as e:
            self.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")

    # ===========================
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    # ===========================
    def run(self):
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞)
        try:
            settings_url = f"{self.base_url}/setSettings/{self.api_token}"
            settings = {"incomingWebhook": "yes", "pollMessageWebhook": "yes"}
            requests.post(settings_url, json=settings, timeout=10)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å setSettings: {e}")

        while True:
            try:
                notification = self.get_notification()
                if notification:
                    self.process_message(notification)
                else:
                    # –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                    time.sleep(1)
            except KeyboardInterrupt:
                logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)


if __name__ == "__main__":
    try:
        bot = WhatsAppBot()
        bot.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ: INSTANCE_ID, INSTANCE_TOKEN, OPENAI_API_KEY, (–æ–ø—Ü.) OPENAI_MODEL")


